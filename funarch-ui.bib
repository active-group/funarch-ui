@InProceedings{Haggis,
author="Finne, Sigbjorn
and Jones, Simon Peyton",
editor="Launchbury, John
and Meijer, Erik
and Sheard, Tim",
title="Composing the user interface with Haggis",
booktitle="Advanced Functional Programming",
year="1996",
publisher="Springer",
address="Berlin, Heidelberg",
pages="1--37",
isbn="978-3-540-70639-7"
}

@inbook{eXene,
author = {Gansner, Emden R. and Reppy, John H.},
title = {A multi-threaded higher-order user interface toolkit},
year = {1993},
isbn = {0471937843},
publisher = {John Wiley \& Sons, Inc.},
address = {USA},
booktitle = {User Interface Software},
pages = {61–80},
numpages = {20}
}

@book{ConcurrentML,
  author = {John H. Reppy},
  title = {Concurrent Programming in {ML}},
  publisher = {Cambridge University Press},
  address = {Cambridge, England},
  year = 1999,
  topic = {concurrency,cml,sml}
}

@Misc{MVC,
  author = 	 {Trygve Reenskaug},
  title = 	 {{MVC} -- {XEROX PARC} 1978--79},
  howpublished = {\url{https://folk.universitetetioslo.no/trygver/themes/mvc/mvc-index.html}},
  note = 	 {Retrieved 2025-05}}

@Book{GoF,
  author = 	 {Erich Gamma and Richard Helm and Ralph Johnson and John Vlissides},
  title = 	 {Design Patterns:
Elements of Reusable Object-Oriented Software},
  publisher = 	 {Addison-Wesley},
  year = 	 1994}


@inproceedings{Fudgets,
  TITLE = {{Fudgets} - A Graphical User Interface in a Lazy Functional Language} ,
  AUTHOR = {Magnus Carlsson and Thomas Hallgren} ,
  PAGES = {321--330} ,
  BOOKTITLE = {FPCA '93 - Conference on Functional Programming
	       Languages and Computer Architecture} ,
  PUBLISHER = {ACM Press} ,
  MONTH = {June} ,
  YEAR = "1993" ,
  ISBN = {0-89791-595-X} ,
  doi = {10.1145/165180.165228}
}

@inproceedings{10.1145/1596550.1596561,
author = {Felleisen, Matthias and Findler, Robert Bruce and Flatt, Matthew and Krishnamurthi, Shriram},
title = {A functional I/O system or, fun for freshman kids},
year = {2009},
isbn = {9781605583327},
publisher = {ACM},
address = {New York},
url = {https://doi.org/10.1145/1596550.1596561},
doi = {10.1145/1596550.1596561},
abstract = {Functional programming languages ought to play a central role in mathematics education for middle schools (age range: 10-14). After all, functional programming is a form of algebra and programming is a creative activity about problem solving. Introducing it into mathematics courses would make pre-algebra course come alive. If input and output were invisible, students could implement fun simulations, animations, and even interactive and distributed games all while using nothing more than plain mathematics. We have implemented this vision with a simple framework for purely functional I/O. Using this framework, students design, implement, and test plain mathematical functions over numbers, booleans, string, and images. Then the framework wires them up to devices and performs all the translation from external information to internal data (and vice versa)--just like every other operating system. Once middle school students are hooked on this form of programming, our curriculum provides a smooth path for them from pre-algebra to freshman courses in college on object-oriented design and theorem proving.},
booktitle = {Proceedings of the 14th ACM SIGPLAN International Conference on Functional Programming},
pages = {47–58},
numpages = {12},
keywords = {introductory programming},
location = {Edinburgh, Scotland},
series = {ICFP '09}
}

@article{UniverseTeachpack,
author = {Felleisen, Matthias and Findler, Robert Bruce and Flatt, Matthew and Krishnamurthi, Shriram},
title = {A functional I/O system or, fun for freshman kids},
year = {2009},
issue_date = {September 2009},
publisher = {ACM},
address = {New York},
volume = {44},
number = {9},
issn = {0362-1340},
url = {https://doi.org/10.1145/1631687.1596561},
doi = {10.1145/1631687.1596561},
journal = {SIGPLAN Not.},
month = aug,
pages = {47–58},
numpages = {12},
keywords = {introductory programming}
}

@inproceedings{Henderson1982,
author = {Henderson, Peter},
title = {Functional geometry},
year = {1982},
publisher = {ACM},
address = {New York},
booktitle = {Proceedings of the 1982 ACM Symposium on LISP and Functional Programming},
pages = {179-–187},
numpages = {9},
location = {Pittsburgh, Pennsylvania, USA},
series = {LFP '82},
doi = {10.1145/800068.802148}
}

@inproceedings{Fruit,
author = {Courtney, Antony and Elliott, Conal},
year = 2001,
month = sep,
title = {Genuinely Functional User Interfaces},
booktitle = {Proceedings of the Haskell Workshop},
location = {Firenze, Italy}
}

@inproceedings{FRP,
author = {Elliott, Conal and Hudak, Paul},
title = {Functional reactive animation},
year = {1997},
isbn = {0897919181},
publisher = {ACM},
address = {New York},
url = {https://doi.org/10.1145/258948.258973},
doi = {10.1145/258948.258973},
booktitle = {Proceedings of the Second ACM SIGPLAN International Conference on Functional Programming},
pages = {263–273},
numpages = {11},
location = {Amsterdam, The Netherlands},
series = {ICFP '97}
}

@inproceedings{Elm,
author = {Czaplicki, Evan and Chong, Stephen},
title = {Asynchronous functional reactive programming for GUIs},
year = {2013},
isbn = {9781450320146},
publisher = {ACM},
address = {New York},
url = {https://doi.org/10.1145/2491956.2462161},
doi = {10.1145/2491956.2462161},
booktitle = {Proceedings of the 34th ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {411–422},
numpages = {12},
keywords = {functional reactive programming, graphical user interfaces},
location = {Seattle, Washington, USA},
series = {PLDI '13}
}


@Misc{ElmFarewellFRP,
  author = 	 {Evan Czaplicki},
  title = 	 {A Farewell to {FRP}},
  howpublished = {\url{https://elm-lang.org/news/farewell-to-frp}},
  month = 	 may,
  year = 	 2016}


@Misc{React,
  author = 	 {Pete Hunt},
  title = 	 {Why did we build {React}?},
  howpublished = {\url{http://facebook.github.io/react/blog/2013/06/05/why-react.html}},
  month = 	 jun,
  year = 	 2013}

@article{SPE,
  author       = {Stephen Cook and
                  Rachel Harrison and
                  Meir M. Lehman and
                  Paul Wernick},
  title        = {Evolution in software systems: foundations of the {SPE} classification
                  scheme},
  journal      = {J. Softw. Maintenance Res. Pract.},
  volume       = {18},
  number       = {1},
  pages        = {1--35},
  year         = {2006},
  url          = {https://doi.org/10.1002/smr.314},
  doi          = {10.1002/SMR.314},
  timestamp    = {Wed, 20 May 2020 21:25:24 +0200},
  biburl       = {https://dblp.org/rec/journals/smr/CookHLW06.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@Book{VB6,
  author = 	 {Steven Brown},
  title = 	 {{Visual Basic} 6 Complete},
  publisher = 	 {John Wiley {\&} Sons},
  year = 	 1999}

@Book{GreenBook,
  author = 	 {Edward Yourdon and Larry L. Constantine},
  title = 	 {Structured Design: Fundamentals of a Discipline of Computer Program and System Design},
  publisher = 	 {Prentice-Hall},
  year = 	 1979}

@article{Modularity,
author = {Parnas, D. L.},
title = {On the criteria to be used in decomposing systems into modules},
year = {1972},
issue_date = {Dec. 1972},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {15},
number = {12},
issn = {0001-0782},
url = {https://doi.org/10.1145/361598.361623},
doi = {10.1145/361598.361623},
journal = {Commun. ACM},
month = dec,
pages = {1053–1058},
numpages = {6},
keywords = {KWIC index, modularity, modules, software, software design, software engineering}
}

@Misc{Reacl,
  author = {{Active Group}},
  key = 	 {Reacl},
  year = 2014,
  title = 	 {Reacl -- A ClojureScript library for programming with Facebook's React framework},
  howpublished = {{\url{https://github.com/active-group/reacl}}}}

@Misc{reacl-c,
  author = {{Active Group}},
  key = 	 {reacl-c},
  year = 2020,
  title = 	 {reacl-c - A web programming library for ClojureScript},
  howpublished = {{\url{https://github.com/active-group/reacl-c}}}}

@Misc{ActiveData,
  key = 	 {ActiveData},
  author = 	 {{Active Group}},
  title = 	 {Active Data},
  year = 2025,
  howpublished = {{\url{https://github.com/active-group/active-data}}}}


@article{Lenses,
author = {Foster, J. Nathan and Greenwald, Michael B. and Moore, Jonathan T. and Pierce, Benjamin C. and Schmitt, Alan},
title = {Combinators for bidirectional tree transformations: A linguistic approach to the view-update problem},
year = {2007},
issue_date = {May 2007},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {29},
number = {3},
issn = {0164-0925},
url = {https://doi.org/10.1145/1232420.1232424},
doi = {10.1145/1232420.1232424},
journal = {ACM Trans. Program. Lang. Syst.},
month = may,
pages = {17–es},
numpages = {65},
keywords = {Bidirectional programming, Harmony, XML, lenses, view update problem}
}

@Article{MVVM,
  author = 	 {Josh Smith},
  title = 	 {Patterns - {WPF} Apps With The {Model-View-ViewModel} Design Pattern},
  journal = 	 {MSDN Magagzine},
  year = 	 2009,
  volume = 	 24,
  number = 	 02,
  month = 	 feb}

@Misc{Halogen,
  key = 	 {Halogen},
  title = 	 {https://purescript-halogen.github.io/purescript-halogen/},
  howpublished = {\url{https://purescript-halogen.github.io/purescript-halogen/}}
}

@inproceedings{Eros,
author = {Elliott, Conal M.},
title = {Tangible functional programming},
year = {2007},
isbn = {9781595938152},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1291151.1291163},
doi = {10.1145/1291151.1291163},
abstract = {We present a user-friendly approach to unifying program creation and execution, based on a notion of "tangible values" (TVs), which are visual and interactive manifestations of pure values, including functions. Programming happens by gestural composition of TVs. Our goal is to give end-users the ability to create parameterized, composable content without imposing the usual abstract and linguistic working style of programmers. We hope that such a system will put the essence of programming into the hands of many more people, and in particular people with artistic/visual creative style.In realizing this vision, we develop algebras for visual presentation and for "deep" function application, where function and argument may both be nested within a structure of tuples, functions, etc. Composition gestures are translated into chains of combinators that act simultaneously on statically typed values and their visualizations.},
booktitle = {Proceedings of the 12th ACM SIGPLAN International Conference on Functional Programming},
pages = {59–70},
numpages = {12},
keywords = {arrows, combinator libraries, end-user programming, gestural composition, interactive programming, interactive visualization},
location = {Freiburg, Germany},
series = {ICFP '07}
}

@inproceedings{Yampa,
author = {Perez, Ivan and B\"{a}renz, Manuel and Nilsson, Henrik},
title = {Functional reactive programming, refactored},
year = {2016},
isbn = {9781450344340},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2976002.2976010},
doi = {10.1145/2976002.2976010},
abstract = {Functional Reactive Programming (FRP) has come to mean many things. Yet, scratch the surface of the multitude of realisations, and there is great commonality between them. This paper investigates this commonality, turning it into a mathematically coherent and practical FRP realisation that allows us to express the functionality of many existing FRP systems and beyond by providing a minimal FRP core parameterised on a monad. We give proofs for our theoretical claims and we have verified the practical side by benchmarking a set of existing, non-trivial Yampa applications running on top of our new system with very good results.},
booktitle = {Proceedings of the 9th International Symposium on Haskell},
pages = {33–44},
numpages = {12},
keywords = {Haskell, functional reactive programming, monadic streams, reactive program- ming, stream programming},
location = {Nara, Japan},
series = {Haskell 2016}
}
